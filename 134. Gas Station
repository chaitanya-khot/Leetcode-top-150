## initial attempt to solve the question. Built the logic but does not solve all the test cases. Need to refactor the code to solve all the test cases

class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        tank, res = 0, -1

        for i in range(len(gas)):
            if gas[i] >= cost[i]:
                for i in range(len(gas) - 1):
                    if i == len(gas):
                        i + 1 == 0
                    tank = tank - cost[i] + gas[i+1]
                    res = i
                    if tank < cost[i]:
                        res = -1

        return res


## Below is a greedy solution which compares the total cost and total gas and uses a greedy approach to find the index required. The brute force solution has the time complexity of O(n ^ 2)
## This logic relies on there exists a solution (as we know that sum (gas) is greater than sum (cost)) and there exists only one solution conditions
## This solution has the time complexity of O(n) along with space complexity O(1)

class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        if sum(gas) < sum(cost):
            return -1

        total, res = 0, 0
        for i in range(len(gas)):
            total += (gas[i] - cost[i])

            if total < 0:
                total = 0
                res = i + 1
        
        return res

